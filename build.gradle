buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = 'sonatype'
			url = 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
	}
}

plugins {
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: "java"
apply plugin: "net.minecraftforge.gradle"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

def modversion = "${project.version_major}.${project.version_minor}.${project.version_micro}"

def fullyQualifiedForgeVersion = "${project.version_minecraft}-${project.version_forge}"
version = "${project.version_minecraft}-${modversion}"

repositories {
	maven {
		url = "https://files.minecraftforge.net/maven"
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${fullyQualifiedForgeVersion}"
}

minecraft {
	mappings channel: "${mapping_channel}", version: "${mapping_version}"
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				lunatriuscore {
					source sourceSets.main
				}
			}
		}

		Server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				lunatriuscore {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			args '--mod', 'lunatriuscore', '--all', '--output', file('src/generated/resources/')

			mods {
				lunatriuscore {
					source sourceSets.main
				}
			}
		}
	}
}

jar {
	manifest {
		attributes(["Specification-Title"     : project.name,
		            "Specification-Vendor"    : project.group,
		            "Specification-Version"   : version,
		            "Implementation-Title"    : project.name,
		            "Implementation-Version"  : version,
		            "Implementation-Vendor"   : project.group,
		            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		            "Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned"])
	}
}

processResources {
	// This will ensure that this task is redone when the versions change.
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	inputs.properties(version: version, mcversion: version_minecraft, forgeversion: forgeversion, modid: id, modname: modname)

	// Replace stuff in mods.toml, nothing else
	filesMatching('META-INF/mods.toml') { // Replace with your files
		expand([modversion  : modversion,
		        mcversion   : version_minecraft,
		        forgeversion: forgeversion,
		        modid       : id,
		        modname     : modname])
	}

	// Copy everything else except the mods.toml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}


// Create Sources Jar
tasks.register('sourcesJar', Jar) {
	dependsOn classes
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

def processReferenceJava = tasks.register('processReferenceJava', Copy) {
	from 'src/main/java/com/github/lunatrius/core/reference'
	into "$buildDir/generated/sources/reference"

	include 'Reference.java' // Target only Reference.java
	expand([modversion   : modversion,
	        mcversion    : version_minecraft,
	        version_forge: version_forge,
	        modid        : id,
	        modname      : modname])
}

// Ensure Reference.java is included in compilation along with other sources
sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', "$buildDir/generated/sources/reference"] // Include all sources
			exclude 'com/github/lunatrius/core/reference/Reference.java' // Exclude original
		}
	}
}

tasks.compileJava {
	dependsOn processReferenceJava // Ensure substitution happens before compilation
}

artifacts {
	archives sourcesJar
}